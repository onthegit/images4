package images4

import (
	"image"
	"math"
	"path"
	"reflect"
	"testing"
)

func TestSizedIcon(t *testing.T) {
	icon := sizedIcon(4)
	expected := 4 * 4 * 3
	got := len(icon.Pixels)
	if got != expected {
		t.Errorf(
			"Expected length %d, got %d.", expected, got)
	}
}

func TestEmptyIcon(t *testing.T) {
	icon1 := EmptyIcon()
	icon2 := IconT{nil, image.Point{0, 0}}

	if !reflect.DeepEqual(icon1.Pixels, icon2.Pixels) {
		t.Errorf("Icons' Pixels mismatch. They must be equal: %v %v",
			icon1.Pixels, icon2.Pixels)
	}
	if !reflect.DeepEqual(icon1.ImgSize, icon2.ImgSize) {
		t.Errorf("Icons' ImgSize mismatch. They must be equal: %v %v",
			icon1.ImgSize, icon2.ImgSize)
	}
}

func TestArrIndex(t *testing.T) {
	x, y := 2, 3
	size := 4
	ch := 2
	got := arrIndex(image.Point{x, y}, size, ch)
	expected := 46
	if got != expected {
		t.Errorf("Expected %d, got %d.", expected, got)
	}
	x, y = 1, 1
	ch = 1
	got = arrIndex(image.Point{x, y}, size, ch)
	expected = 21
	if got != expected {
		t.Errorf("Expected %d, got %d.", expected, got)
	}
	x, y = 3, 3
	ch = 0
	got = arrIndex(image.Point{x, y}, size, ch)
	expected = 15
	if got != expected {
		t.Errorf("Expected %d, got %d.", expected, got)
	}
}

func TestSet(t *testing.T) {
	icon := sizedIcon(4)
	Set(icon, 4, image.Point{1, 1}, 13.5, 29.9, 95.9)
	expected := sizedIcon(4)
	expectedPixels := []float64{0, 0, 0, 0, 0, 13.5, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29.9, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95.9, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0}
	for i := range expectedPixels {
		expected.Pixels[i] = uint16(expectedPixels[i] * 255)
	}
	if !reflect.DeepEqual(expected, icon) {
		t.Errorf("Expected %v, got %v.", expected, icon)
	}
}

func TestGet(t *testing.T) {
	icon := sizedIcon(4)
	iconPix := []float64{0, 0, 0, 0, 0, 13.5, 0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 29.9, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95.9, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0}
	for i := range iconPix {
		icon.Pixels[i] = uint16(iconPix[i] * 255)
	}
	c1, c2, c3 := Get(icon, 4, image.Point{1, 1})
	if math.Abs(float64(c1)-13.5) > 0.1 || math.Abs(float64(c2)-29.9) > 0.1 || math.Abs(float64(c3)-95.9) > 0.1 {
		t.Errorf(
			"Expected near 13.5, 29.9, 95.9, got %v, %v, %v.",
			c1, c2, c3)
	}
}

// Only checking that image size is correct.
func TestIcon(t *testing.T) {
	const (
		testDir1  = "testdata"
		testDir2  = "resample"
		imageName = "nearest533x400.png"
	)
	filePath := path.Join(testDir1, testDir2, imageName)
	img, err := Open(filePath)
	if err != nil {
		t.Error(
			"Cannot decode", filePath)
	}
	icon := Icon(img)
	if icon.ImgSize.X != 533 || icon.ImgSize.Y != 400 {
		t.Errorf(
			"Expected image size (533, 400), got (%d, %d).",
			icon.ImgSize.X, icon.ImgSize.Y)
	}
}

func TestYCbCr(t *testing.T) {
	var r, g, b float64 = 255, 255, 255
	var eY, eCb, eCr float64 = 255, 128, 128
	y, cb, cr := yCbCr(r, g, b)
	// Int values, so the test does not become brittle.
	if math.Abs(y-eY) > 0.1 ||
		math.Abs(cb-eCb) > 0.1 ||
		math.Abs(cr-eCr) > 0.1 {
		t.Errorf("Expected (%v,%v,%v) got (%v,%v,%v).",
			eY, eCb, eCr, y, cb, cr)
	}
	r, g, b = 14, 22, 250
	// From the original external formula.
	eY, eCb, eCr = 45.6, 243.3, 105.5
	y, cb, cr = yCbCr(r, g, b)
	// Int values, so the test does not become brittle.
	if int(y) != int(eY) || int(cb) !=
		int(eCb) || int(cr) != int(eCr) {
		t.Errorf("Expected (%v,%v,%v) got (%v,%v,%v).",
			int(eY), int(eCb), int(eCr),
			int(y), int(cb), int(cr))
	}
}

func testNormalize(src, want IconT, t *testing.T) {
	src.normalize()
	for i := range src.Pixels {
		if math.Abs(float64(src.Pixels[i])-float64(want.Pixels[i]))/
			float64(want.Pixels[i]) > 1 {
			t.Errorf("Want %v, got %v.", want, src)
			break
		}
	}
}

func TestNormalize(t *testing.T) {

	src := EmptyIcon()
	src.Pixels = []uint16{8670, 45801, 29935, 11700, 53747, 33743, 44189, 48647, 8000, 49182, 20434, 15423, 46834, 32946, 37230, 63317, 28058, 6485, 29179, 29196, 59058, 49234, 50741, 19913, 64476, 31201, 30996, 28808, 720, 48844, 41325, 19517, 30908, 58705, 20865, 4306, 2909, 58380, 28762, 27511, 48562, 5041, 51122, 30882, 57739, 29392, 35254, 61898, 39625, 23720, 59995, 51153, 50919, 28488, 35064, 33029, 33237, 36843, 20078, 25135, 6877, 11867, 56143, 10160, 15597, 43740, 8877, 35459, 60119, 20334, 16937, 56416, 6827, 38948, 44732, 54001, 60061, 60972, 57112, 16523, 61155, 5701, 40190, 55897, 7134, 16251, 39892, 19855, 43222, 54575, 59722, 54342, 23580, 26257, 61420, 815, 39345, 10940, 31442, 63002, 52973, 40687, 12674, 32538, 33552, 30224, 40345, 10436, 24821, 50417, 47839, 62478, 37337, 18230, 33532, 45803, 23903, 38849, 35630, 3627, 38659, 31402, 19608, 62399, 48530, 3753, 36802, 25329, 53769, 5365, 12726, 63463, 904, 7375, 62226, 451, 22133, 221, 63653, 62807, 42256, 50027, 21033, 36161, 3588, 46813, 37872, 35987, 986, 36660, 1202, 44719, 58405, 36560, 26745, 13657, 23196, 28188, 26293, 56759, 17684, 18406, 54165, 3998, 45305, 53890, 41361, 6359, 7405, 3328, 32031, 56429, 47514, 22217, 16040, 16167, 6175, 48735, 36290, 54622, 41591, 13457, 50097, 41033, 21848, 4299, 49897, 41964, 35484, 52596, 29367, 56402, 10443, 27805, 16583, 25625, 30523, 62152, 23240, 64471, 64466, 59924, 7174, 43059, 46756, 55581, 1999, 24458, 7400, 21940, 57965, 40574, 23153, 51189, 51073, 27884, 61911, 52357, 14291, 5207, 34548, 43078, 19790, 34009, 44402, 27855, 57427, 1081, 62896, 64235, 24699, 22668, 42119, 18484, 56684, 4080, 11400, 6986, 58352, 57121, 48421, 2320, 58727, 32763, 50307, 20600, 2464, 31682, 57633, 36149, 44016, 747, 47489, 44600, 29839, 61025, 48568, 8425, 31064, 53872, 11855, 49332, 10546, 21119, 11459, 54084, 42448, 324, 11798, 53552, 42757, 25887, 22761, 36103, 2156, 49624, 9194, 47341, 60071, 14493, 26676, 34587, 57408, 64326, 55415, 59744, 34885, 42007, 33864, 49781, 21178, 48073, 58192, 62091, 49217, 30950, 64026, 6972, 59068, 31061, 10621, 18316, 12150, 5498, 29100, 52325, 42576, 55699, 6835, 14422, 27324, 15251, 53763, 53195, 63126, 14229, 29628, 8018, 55615, 16097, 64658, 3592, 876, 8917, 20167, 13926, 57807, 17979, 55333, 14765, 20319, 29759, 42546, 41141, 22034, 49653, 44053, 40404, 7205, 13305, 46645, 14602, 15398, 3116, 15038, 6957, 56078, 31672, 19903, 4166, 4415, 38343, 10208, 34337, 40584, 17486, 42009, 27122, 31383, 6076, 50009, 8451, 12074}

	want := EmptyIcon()
	want.Pixels = []uint16{8108, 45978, 29796, 11198, 54082, 33680, 44334, 48880, 7424, 49426, 20106, 14995, 47031, 32867, 37236, 63842, 27882, 5879, 29025, 29042, 59499, 49479, 51016, 19575, 65025, 31087, 30878, 28647, 0, 49081, 41413, 19171, 30788, 59139, 20545, 3657, 2232, 58807, 28600, 27324, 48794, 4407, 51405, 30762, 58153, 29242, 35221, 62395, 39679, 23457, 60454, 51436, 51198, 28320, 35027, 32952, 33164, 36841, 19743, 24900, 6279, 11368, 56526, 9627, 15173, 43876, 8319, 35430, 60581, 20004, 16539, 56804, 6228, 38988, 44888, 54341, 60522, 61451, 57514, 16117, 61637, 5080, 40255, 56275, 6541, 15840, 39951, 19515, 43347, 54926, 60176, 54689, 23315, 26045, 61908, 96, 39393, 10423, 31333, 63521, 53293, 40762, 12191, 32451, 33485, 30091, 40413, 9909, 24580, 50686, 48056, 62987, 37345, 17858, 33465, 45980, 23644, 38887, 35604, 2964, 38694, 31557, 19620, 62928, 48891, 3574, 37022, 25410, 54193, 5206, 12655, 64004, 691, 7240, 62752, 232, 22176, 0, 64197, 63340, 42542, 50406, 21063, 36373, 3407, 47154, 38105, 36197, 774, 36878, 992, 45034, 58885, 36777, 26843, 13598, 23252, 28304, 26386, 57219, 17673, 18404, 54594, 3822, 45627, 54316, 41636, 6212, 7270, 3144, 32193, 56885, 47863, 22261, 16009, 16138, 6025, 49099, 36504, 55057, 41869, 13395, 50477, 41304, 21887, 4127, 50275, 42246, 35688, 53006, 29497, 56858, 10345, 27916, 16559, 25710, 30667, 62678, 23296, 65025, 65019, 60423, 7036, 43354, 47096, 56027, 1799, 24529, 7265, 21980, 58440, 40839, 23208, 51582, 51465, 27996, 62434, 52764, 14239, 5046, 34741, 43373, 19805, 34195, 44713, 27967, 57896, 870, 63431, 64786, 24773, 22717, 42403, 18483, 57144, 3905, 11313, 6846, 58832, 57586, 48781, 2124, 59030, 32787, 50519, 20493, 2162, 31694, 57924, 36209, 44161, 427, 47671, 44751, 29832, 61352, 48762, 8188, 31070, 54123, 11654, 49534, 10331, 21018, 11254, 54337, 42576, 0, 11597, 53799, 42888, 25837, 22677, 36163, 1851, 49829, 8965, 47522, 60388, 14321, 26635, 34631, 57697, 64689, 55682, 60058, 34932, 42130, 33900, 49988, 21077, 48261, 58489, 62430, 49418, 30954, 64386, 6719, 59374, 31067, 10407, 18185, 11953, 5229, 29085, 52559, 42705, 55969, 6580, 14249, 27290, 15087, 54012, 53438, 63476, 14054, 29618, 7776, 55884, 15942, 65025, 3303, 557, 8685, 20056, 13748, 58100, 17844, 55599, 14596, 20209, 29751, 42675, 41255, 21943, 49858, 44198, 40510, 6954, 13120, 46818, 14431, 15235, 2821, 14872, 6704, 56352, 31684, 19789, 3883, 4134, 38427, 9990, 34378, 40692, 17346, 42132, 27085, 31392, 5813, 50218, 8214, 11876}

	testNormalize(src, want, t)
}

func TestRotate(t *testing.T) {

	img0, _ := Open(path.Join("testdata", "rotate", "0.jpg"))
	img90, _ := Open(path.Join("testdata", "rotate", "90.jpg"))
	icon0 := Icon(img0)
	icon90 := Icon(img90)

	if !Similar(Rotate90(icon0), icon90) {
		t.Errorf("Rotate(icon0) is not similar to icon90")
		return
	}
}
